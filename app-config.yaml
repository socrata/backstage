app:
  title: D&I Service Registry
  baseUrl: http://localhost:3000

organization:
  name: Tyler Technologies - D&I

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    # config options: https://node-postgres.com/apis/client
    client: pg
    pluginDivisionMode: schema # plugins get their own schema
    connection:
      database: "service_registry"
      host: localhost
      port: 5432
      user: "service_registry_db_user"
      password: ${PG_PASSWORD}

workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      apps:
        - $include: github-app-socrata-backstage-credentials.yaml

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth: # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    guest: {} # See https://backstage.io/docs/auth/guest/provider
    atlassian: # See https://backstage.io/docs/auth/atlassian/provider/
      development:
        clientId: ${AUTH_ATLASSIAN_CLIENT_ID}
        clientSecret: ${AUTH_ATLASSIAN_CLIENT_SECRET}
        additionalScopes:
          - 'write:jira-work'
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail

# see https://backstage.io/docs/features/software-templates/configuration for software template options
scaffolder:

# see https://backstage.io/docs/features/software-catalog/configuration
catalog:
  stitchingStrategy:
    mode: immediate
  providers:
    githubOrg: # config for getting users/teams into the catalog
      id: socrata
      githubUrl: https://github.com
      orgs: ['socrata'] # TODO - cookbooks and platform
      schedule:
        initialDelay: { seconds: 10 }
        frequency: { hours: 1 }
        timeout: { minutes: 50 }
    github: # config for getting repository information into the catalog
      socrata:
        organization: 'socrata'
        catalogPath: '/**/service-registry.yaml'
        filters:
          branch: 'et/service-registry' # TODO - remove this (is for testing)
        schedule:
          frequency: { minutes: 30 }
          timeout: { minutes: 25 }
  import: # for the import plugin: https://github.com/backstage/backstage/tree/master/plugins/catalog-import
    entityFilename: service-registry.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations: # file locations are relative to the backend process (`packages/backend`)
    - type: file
      target: ../../catalog-info/entities.yaml
    - type: file
      target: ../../catalog-info/template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../catalog-info/org.yaml
      rules:
        - allow: [User, Group]

# see https://backstage.io/docs/permissions/getting-started
permission:
  enabled: true

events:
  http:
    topics:
      - github
  modules:
    github:
      webhookSecret: ${GITHUB_WORKFLOW_SECRET}
